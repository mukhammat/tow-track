import { sendMessage, sendKeyboard, sendReplyKeyboard } from "@utils";
import { getSession, updateSession, nextStep, endSession } from "@sessions";

export interface OrderData {
    from?: string;
    to?: string;
    vehicle_info?: string;
    intercity?: boolean;
    location_url?: string;
    phone?: string;
}
  

export async function order(message: any, botToken: string, towTrack: Fetcher, session: any) {
  const chatId = message.chat.id;
  const text = message.text;

  switch (session.step) {
      case 1:
        break;

      case 2:
        updateSession(chatId, { from: text });
        nextStep(chatId);
        await sendMessage(botToken, chatId, '–ö—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å?');
        break;
  
      case 3:
        updateSession(chatId, { to: text });
        nextStep(chatId);
        await sendMessage(botToken, chatId, '–°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤–æ–¥–∏—Ç—Å—è / –Ω–µ –∑–∞–≤–æ–¥–∏—Ç—Å—è)?');
        break;
  
      case 4:
        updateSession(chatId, { vehicle_info: text });
        nextStep(chatId);
        await sendReplyKeyboard(botToken, chatId, 'üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é:', [
          [{ text: "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location: true }]
        ]);
        break;

      case 5:
        if (message.location) {
          const { latitude, longitude } = message.location;
          const locationUrl = `https://maps.google.com/?q=${latitude},${longitude}`;
          updateSession(chatId, { location_url: locationUrl });
          nextStep(chatId);
          await sendMessage(botToken, chatId, 'üìû –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.');
        } else if (text) {
          updateSession(chatId, { location_url: text });
          nextStep(chatId);
          await sendMessage(botToken, chatId, 'üìû –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.');
        } else {
          await sendMessage(botToken, chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å.');
        }
        break;
        
      case 6: 
        updateSession(chatId, { phone: text });

        const finalSession = getSession<OrderData>(chatId);
  
        if (finalSession) {
          const payload = {
            from: finalSession.data.from!,
            to: finalSession.data.to!,
            intercity: finalSession.data.intercity!,
            phone: finalSession.data.phone!,
            client_telegram_id: chatId,
            vehicle_info: finalSession.data.vehicle_info!,
            location_url: finalSession.data.location_url
          };
          console.log(typeof chatId);
  
          try {
            console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', payload);
            const response = await towTrack.fetch("http://127.0.0.1:8787/api/orders/create", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(payload)
            });
            console.log(response);
  
            if (response.ok) {
              await sendMessage(botToken, chatId, '‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –í —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.');
            } else {
              await sendMessage(botToken, chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
            await sendMessage(botToken, chatId, '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.');
          }
  
          endSession(chatId);
        }
  
        break;
  
      default:
        await sendMessage(botToken, chatId, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
        endSession(chatId);
    }
}

